
'number' + 3 + 3 // Результат: "number33" // JS читає код зліва на право, тому рядок 'number' буде обʼєднано з числом 3, яке перетворюється у рядок і по аналогії те саме відбувається з наступним числом 3. Тобто відбувається канкатенація.

null + 3 // Результат: "3" // Оскільки тут числова операція, то JS пертворює null на число, і у нас відбувається: 0 + 3.

5 && "qwerty" // Результат: "qwerty" // JS перевіряє перше булеве значення "5", і воно є true, потім перевіряє друге значення "qwerty" яке теж є true. Оскільки обидва є true, то &&повертає останній варіант.

    + '40' + +'2' + "hillel"; // Результат: "42hillel" // Унарний + перед рядком перетворює рядок у число, в результаті додавання отримуємо 42. Потім 42 перетворюється в рядок та обʼєднується з рядком "hillel", тобто відбувається канкатенація.

'10' - 5 === 6; // Результат: "false" // При числовій операції, рядок '10' перетвориться на числове значення 10, та  відбудеться відніманням з результатом 5. Потім відбувається строге порівняння за значенням та типом даних, які в даному випадку не є рівними.

true + false // Результат: "1" // При операціях з додаванням булевих значень, JS переводить їх у числа, тому відповідно отримуємо : 1 + 0 = 1.

'4px' - 3 //  Результат: "NaN" // В даному випадку при арифметичній операції віднімання, рядок ʼ4pxʼ не може бути перетворений у числове значення через присутність нечислових символів. 

'4' - 3 //  Результат: "1" // В даному випадку при арифметичній операції віднімання, рядок ʼ4ʼ перетворюється у числове значення та відбувається віднімання. 

'6' + 3 ** 0; // Результат: "61" // Спочатку число 3 приводиться у ступінь 0 і отримуємо 1. Потім відбувається канкатенація з рядком, тобто ʼ6ʼ + 1.

12 / '6' // Результат: "2" // При діленні рядка на число, рядок перетворюється у числове значення і потім відбувається ділення.

'10' + (5 === 6); // Результат: "10false" // Спочатку здійснюється операція строге порівняння, результатом якого буде false. Потім відбувається канкатенація рядку ʼ10ʼ з false.

null == '' // Результат: "false" // При операції не строгого порівняння, null може дорівнювати лише undefined, у випадку пустого рядка ʼʼ - вважається false.

3 ** (9 / 3); // Результат: "27" // В данній операції спочатку відбувається операція ділення в дужках, потім число 3 приводиться у ступінь отриманого числа від ділення.

!!'false' == !!'true' // Результат: "true" // Оператором подвійного заперечення (!!) ми перетворюємо рядки у булеве значення. Оскільки два рядки мають значення true, то і в результаті ми отримуємо true.

0 || '0' && 1 // Результат: "1" // Спочатку виконується операція '0' && 1 (оскільки && є пріоритетнішим) в якій два значення true тo повертається останнє значення 1, оскільки обидва значення є true. Потім виконується 0 || 1, оскільки 0 є false, то || повертає перше true значення, яким є 1.

    (+null == false) < 1; // Результат: "false" // Унарний плюс перетворює null у числове значення 0, а булеве значення 'false' JS перетворює у 0, тому не суворе порівняння 0 == 0 буде true. При подальшій операції true < 1, булеве значення перетворюється у число, і виходить 1 < 1, що є false.

false && true || true // Результат: "true" // Спочатку && повертає значення false, потім виконується операція false || true, і повертається true.

false && (false || true) // Результат: "false" // Спочатку виконується операція в дужках і оператор || повертає нам true, і як результат false && true виведе нам false.

    (+null == false) < 1 ** 5; // Результат: "false" // Унарний плюс перетворює null у числове значення 0, а булеве значення ʼfalseʼ JS перетворює у 0, тому не суворе порівняння буде true. Число 1 у 5 степені, дорівнює 1. У свою чергу отримуємо true < 1,а в числових операціях ʼtrueʼ розглядається як 1, тому отримуємо 1 < 1, а це false.

